generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  REFRESH
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Currency {
  USD
  EUR
  UAH
  MDL
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique
  firstName     String
  lastName      String
  password      String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  tokens        Token[]
  transactions  Transaction[]
  categories    Category[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  token     String    @unique
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Transaction {
  id          String          @id @default(uuid()) @db.Uuid
  userId      String          @map("user_id") @db.Uuid
  categoryId  String?         @map("category_id") @db.Uuid          
  value       Float
  type        TransactionType @default(EXPENSE)
  currency    Currency        @default(USD)
  madeAt      DateTime        @default(now())
  comment     String?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model Category {
  id           String           @id @default(uuid()) @db.Uuid
  userId       String?          @map("user_id") @db.Uuid
  name         String           @unique
  icon         String?      
  type         TransactionType
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")

  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("categories")
}
